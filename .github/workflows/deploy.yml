name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - main  # Trigger the deployment when code is pushed to the main branch
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Docker Buildx for building multi-platform images (optional but recommended)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Build the Docker image
    - name: Build Docker image and Save as tarball
      run: |
        docker buildx build --platform linux/arm64 \
          --build-arg DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }} \
          --build-arg DISCORD_STREAMING_URL=${{ vars.DISCORD_STREAMING_URL }} \
          -t massacre-card-game-discord-bot --load .
        docker save massacre-card-game-discord-bot -o massacre-card-game-discord-bot.tar

    # Upload the tarball as an artifact
    - name: Upload tarball as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: massacre-card-game-discord-bot.tar
        path: massacre-card-game-discord-bot.tar

  transfer_and_deploy:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    # Download the tarball artifact
    - name: Download tarball artifact
      uses: actions/download-artifact@v3
      with:
        name: massacre-card-game-discord-bot.tar

    # Set up SSH to Raspberry Pi
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.PI_SSH_PRIVATE_KEY }}

    # Add Raspberry Pi's SSH key to known hosts to avoid verification issues
    - name: Add Raspberry Pi SSH key to known hosts
      run: |
        ssh-keyscan -p ${{ vars.PI_PORT }} ${{ secrets.PI_IP }} >> ~/.ssh/known_hosts

    # Transfer the tarball to Raspberry Pi
    - name: Transfer tarball to Raspberry Pi
      run: |
        scp -P ${{ vars.PI_PORT }} massacre-card-game-discord-bot.tar ${{ vars.PI_USER }}@${{ secrets.PI_IP }}:/home/${{ vars.PI_USER }}

    # SSH into Raspberry Pi to stop old container and load new one
    - name: Stop old container and load new image
      run: |
        # Write the private key to a file for SSH to use
        echo "${{ secrets.PI_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add Raspberry Pi's SSH key to known hosts to avoid verification issues
        ssh-keyscan -p ${{ vars.PI_PORT }} ${{ secrets.PI_IP }} >> ~/.ssh/known_hosts

        # Run SSH command to stop the old container and load the new one
        ssh -p ${{ vars.PI_PORT }} -i ~/.ssh/id_rsa ${{ vars.PI_USER }}@${{ secrets.PI_IP }} << 'EOF'
            # Stop and remove the old container
            docker stop massacre-card-game-discord-bot || true
            docker rm massacre-card-game-discord-bot || true

            # Load the Docker image from the tarball
            docker load -i /home/${{ vars.PI_USER }}/massacre-card-game-discord-bot.tar

            # Run the new container
            nohup lxterminal -e "docker run --rm --name massacre-card-game-discord-bot massacre-card-game-discord-bot; if [ \$? -eq 0 ]; then exit; else exec bash; fi" >/dev/null 2>&1 &

            # Clean up by removing the tarball
            rm /home/${{ vars.PI_USER }}/massacre-card-game-discord-bot.tar

            # Optional: Prune unused Docker resources
            docker system prune -f
        EOF